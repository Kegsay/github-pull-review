[
  {
    "sha": "dc6b6e0e8ff72bf45aa5d3ecbb2de2320b3d4c94",
    "filename": "tests/30rooms/13anonymousaccess.pl",
    "status": "modified",
    "additions": 65,
    "deletions": 1,
    "changes": 66,
    "blob_url": "https://github.com/matrix-org/sytest/blob/9bbcbb71a924ab8ee3bed904b5ddd8efb68ca76a/tests/30rooms/13anonymousaccess.pl",
    "raw_url": "https://github.com/matrix-org/sytest/raw/9bbcbb71a924ab8ee3bed904b5ddd8efb68ca76a/tests/30rooms/13anonymousaccess.pl",
    "contents_url": "https://api.github.com/repos/matrix-org/sytest/contents/tests/30rooms/13anonymousaccess.pl?ref=9bbcbb71a924ab8ee3bed904b5ddd8efb68ca76a",
    "patch": "@@ -167,7 +167,7 @@\n       });\n    };\n \n-test \"Anonymous users can get state for non-world_readable rooms\",\n+test \"Anonymous users can get state for world_readable rooms\",\n    requires => [ local_user_and_room_fixtures(), anonymous_user_fixture() ],\n \n    do => sub {\n@@ -203,6 +203,70 @@\n       );\n    };\n \n+test \"Anonymous user cannot room initalSync for non-world_readable rooms\",\n+   requires => [ anonymous_user_fixture(), local_user_fixture() ],\n+\n+   do => sub {\n+      my ( $anonymous_user, $user ) = @_;\n+\n+      my $room_id;\n+\n+      matrix_create_and_join_room( [ $user ] )\n+      ->then( sub {\n+         ( $room_id ) = @_;\n+\n+         matrix_send_room_text_message( $user, $room_id, body => \"private\" )\n+      })->then( sub {\n+         do_request_json_for( $anonymous_user,\n+            method => \"GET\",\n+            uri    => \"/api/v1/rooms/$room_id/initialSync\",\n+      )})->main::expect_http_403;\n+   };\n+\n+\n+test \"Anonymous user can room initialSync for world_readable rooms\",\n+   requires => [ anonymous_user_fixture(), local_user_fixture() ],\n+\n+   do => sub {\n+      my ( $anonymous_user, $user ) = @_;\n+\n+      my $room_id;\n+\n+      matrix_create_and_join_room( [ $user ] )\n+      ->then( sub {\n+         ( $room_id ) = @_;\n+\n+         matrix_send_room_text_message( $user, $room_id, body => \"private\" )\n+      })->then(sub {\n+         matrix_set_room_history_visibility( $user, $room_id, \"world_readable\" );\n+      })->then( sub {\n+         matrix_send_room_text_message( $user, $room_id, body => \"public\" );\n+      })->then( sub {\n+         do_request_json_for( $anonymous_user,\n+            method => \"GET\",\n+            uri    => \"/api/v1/rooms/$room_id/initialSync\",\n+      )})->then( sub {\n+         my ( $body ) = @_;\n+\n+         require_json_keys( $body, qw( room_id state messages presence ));\n+         require_json_keys( $body->{messages}, qw( chunk start end ));\n+         require_json_list( $body->{messages}{chunk} );\n+         require_json_list( $body->{state} );\n+\n+         log_if_fail \"room initialSync body\", $body;\n+\n+         my $chunk = $body->{messages}{chunk};\n+\n+         @{ $chunk } == 2 or die \"Wrong number of chunks\";\n+         $chunk->[0]->{type} eq \"m.room.history_visibility\" or die \"Want m.room.history_visibility\";\n+         $chunk->[0]->{content}->{history_visibility} eq \"world_readable\" or die \"Wrong history_visibility value\";\n+         $chunk->[1]->{type} eq \"m.room.message\" or die \"Want m.room.message\";\n+         $chunk->[1]->{content}->{body} eq \"public\" or die \"Wrong message body\";\n+\n+         Future->done( 1 );\n+      });\n+   };\n+\n test \"Anonymous users can join guest_access rooms\",\n    requires => [ local_user_and_room_fixtures(), anonymous_user_fixture() ],\n "
  }
]
