[
  {
    "sha": "6720c6a728341aa0caf06837e61de3175fe6888c",
    "filename": "synapse/handlers/message.py",
    "status": "modified",
    "additions": 32,
    "deletions": 23,
    "changes": 55,
    "blob_url": "https://github.com/matrix-org/synapse/blob/f15ba926ccfb36cad31a19fe22a4cb384850f4dd/synapse/handlers/message.py",
    "raw_url": "https://github.com/matrix-org/synapse/raw/f15ba926ccfb36cad31a19fe22a4cb384850f4dd/synapse/handlers/message.py",
    "contents_url": "https://api.github.com/repos/matrix-org/synapse/contents/synapse/handlers/message.py?ref=f15ba926ccfb36cad31a19fe22a4cb384850f4dd",
    "patch": "@@ -456,7 +456,7 @@ def handle_room(event):\n         defer.returnValue(ret)\n \n     @defer.inlineCallbacks\n-    def room_initial_sync(self, user_id, room_id, pagin_config=None):\n+    def room_initial_sync(self, user_id, room_id, pagin_config=None, is_guest=False):\n         \"\"\"Capture the a snapshot of a room. If user is currently a member of\n         the room this will be what is currently in the room. If the user left\n         the room this will be what was in the room when they left.\n@@ -473,15 +473,19 @@ def room_initial_sync(self, user_id, room_id, pagin_config=None):\n             A JSON serialisable dict with the snapshot of the room.\n         \"\"\"\n \n-        member_event = yield self.auth.check_user_was_in_room(room_id, user_id)\n+        membership, member_event_id = yield self._check_in_room_or_world_readable(\n+            room_id,\n+            user_id,\n+            is_guest\n+        )\n \n-        if member_event.membership == Membership.JOIN:\n+        if membership == Membership.JOIN:\n             result = yield self._room_initial_sync_joined(\n-                user_id, room_id, pagin_config, member_event\n+                user_id, room_id, pagin_config, membership, is_guest\n             )\n-        elif member_event.membership == Membership.LEAVE:\n+        elif membership == Membership.LEAVE:\n             result = yield self._room_initial_sync_parted(\n-                user_id, room_id, pagin_config, member_event\n+                user_id, room_id, pagin_config, membership, member_event_id, is_guest\n             )\n \n         private_user_data = []\n@@ -497,19 +501,19 @@ def room_initial_sync(self, user_id, room_id, pagin_config=None):\n \n     @defer.inlineCallbacks\n     def _room_initial_sync_parted(self, user_id, room_id, pagin_config,\n-                                  member_event):\n+                                  membership, member_event_id, is_guest):\n         room_state = yield self.store.get_state_for_events(\n-            [member_event.event_id], None\n+            [member_event_id], None\n         )\n \n-        room_state = room_state[member_event.event_id]\n+        room_state = room_state[member_event_id]\n \n         limit = pagin_config.limit if pagin_config else None\n         if limit is None:\n             limit = 10\n \n         stream_token = yield self.store.get_stream_token_for_event(\n-            member_event.event_id\n+            member_event_id\n         )\n \n         messages, token = yield self.store.get_recent_events_for_room(\n@@ -519,7 +523,7 @@ def _room_initial_sync_parted(self, user_id, room_id, pagin_config,\n         )\n \n         messages = yield self._filter_events_for_client(\n-            user_id, messages\n+            user_id, messages, is_guest=is_guest\n         )\n \n         start_token = StreamToken(token[0], 0, 0, 0, 0)\n@@ -528,7 +532,7 @@ def _room_initial_sync_parted(self, user_id, room_id, pagin_config,\n         time_now = self.clock.time_msec()\n \n         defer.returnValue({\n-            \"membership\": member_event.membership,\n+            \"membership\": membership,\n             \"room_id\": room_id,\n             \"messages\": {\n                 \"chunk\": [serialize_event(m, time_now) for m in messages],\n@@ -542,7 +546,7 @@ def _room_initial_sync_parted(self, user_id, room_id, pagin_config,\n \n     @defer.inlineCallbacks\n     def _room_initial_sync_joined(self, user_id, room_id, pagin_config,\n-                                  member_event):\n+                                  membership, is_guest):\n         current_state = yield self.state.get_current_state(\n             room_id=room_id,\n         )\n@@ -574,12 +578,14 @@ def _room_initial_sync_joined(self, user_id, room_id, pagin_config,\n \n         @defer.inlineCallbacks\n         def get_presence():\n-            states = yield presence_handler.get_states(\n-                target_users=[UserID.from_string(m.user_id) for m in room_members],\n-                auth_user=auth_user,\n-                as_event=True,\n-                check_auth=False,\n-            )\n+            states = {}\n+            if not is_guest:\n+                states = yield presence_handler.get_states(\n+                    target_users=[UserID.from_string(m.user_id) for m in room_members],\n+                    auth_user=auth_user,\n+                    as_event=True,\n+                    check_auth=False,\n+                )\n \n             defer.returnValue(states.values())\n \n@@ -599,7 +605,7 @@ def get_presence():\n         ).addErrback(unwrapFirstError)\n \n         messages = yield self._filter_events_for_client(\n-            user_id, messages\n+            user_id, messages, is_guest=is_guest, require_all_visible_for_guests=False\n         )\n \n         start_token = now_token.copy_and_replace(\"room_key\", token[0])\n@@ -607,8 +613,7 @@ def get_presence():\n \n         time_now = self.clock.time_msec()\n \n-        defer.returnValue({\n-            \"membership\": member_event.membership,\n+        ret = {\n             \"room_id\": room_id,\n             \"messages\": {\n                 \"chunk\": [serialize_event(m, time_now) for m in messages],\n@@ -618,4 +623,8 @@ def get_presence():\n             \"state\": state,\n             \"presence\": presence,\n             \"receipts\": receipts,\n-        })\n+        }\n+        if not is_guest:\n+            ret[\"membership\"] = membership\n+\n+        defer.returnValue(ret)"
  },
  {
    "sha": "df2dc37b24f50e57148efc490a01bad430966d44",
    "filename": "synapse/rest/client/v1/room.py",
    "status": "modified",
    "additions": 2,
    "deletions": 1,
    "changes": 3,
    "blob_url": "https://github.com/matrix-org/synapse/blob/f15ba926ccfb36cad31a19fe22a4cb384850f4dd/synapse/rest/client/v1/room.py",
    "raw_url": "https://github.com/matrix-org/synapse/raw/f15ba926ccfb36cad31a19fe22a4cb384850f4dd/synapse/rest/client/v1/room.py",
    "contents_url": "https://api.github.com/repos/matrix-org/synapse/contents/synapse/rest/client/v1/room.py?ref=f15ba926ccfb36cad31a19fe22a4cb384850f4dd",
    "patch": "@@ -372,12 +372,13 @@ class RoomInitialSyncRestServlet(ClientV1RestServlet):\n \n     @defer.inlineCallbacks\n     def on_GET(self, request, room_id):\n-        user, _, _ = yield self.auth.get_user_by_req(request)\n+        user, _, is_guest = yield self.auth.get_user_by_req(request, allow_guest=True)\n         pagination_config = PaginationConfig.from_request(request)\n         content = yield self.handlers.message_handler.room_initial_sync(\n             room_id=room_id,\n             user_id=user.to_string(),\n             pagin_config=pagination_config,\n+            is_guest=is_guest,\n         )\n         defer.returnValue((200, content))\n "
  }
]
